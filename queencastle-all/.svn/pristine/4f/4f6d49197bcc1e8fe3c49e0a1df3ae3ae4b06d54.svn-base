package com.queencastle.weixin.controllers;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.queencastle.dao.model.PropertyDict;
import com.queencastle.dao.model.User;
import com.queencastle.dao.model.UserDetailInfo;
import com.queencastle.dao.model.area.Area;
import com.queencastle.dao.model.area.City;
import com.queencastle.dao.model.area.Province;
import com.queencastle.dao.model.relations.UserGroup;
import com.queencastle.dao.model.relations.UserMember;
import com.queencastle.dao.mybatis.IdTypeHandler;
import com.queencastle.service.config.GlobalValue;
import com.queencastle.service.interf.PropertyDictService;
import com.queencastle.service.interf.UserDetailInfoService;
import com.queencastle.service.interf.UserService;
import com.queencastle.service.interf.area.AreaInfoService;
import com.queencastle.service.interf.relations.UserAuditService;
import com.queencastle.service.interf.relations.UserGroupService;
import com.queencastle.service.interf.relations.UserMemberService;
import com.queencastle.service.sessions.PermissionContext;
import com.queencastle.service.utils.WeiXinHelper;

/**
 * 和微信相关的接口数据，仅作测试用
 * 
 * @author YuDongwei
 *
 */
@Controller
public class WeiXinIndexController {
    private static Logger logger = LoggerFactory.getLogger(WeiXinIndexController.class);
    @Autowired
    private AreaInfoService areaInfoService;
    @Autowired
    private UserMemberService userMemberService;
    @Autowired
    private PropertyDictService propertyDictService;
    @Autowired
    private UserAuditService userAuditService;
    @Autowired
    private UserService userService;
    @Autowired
    private UserGroupService userGroupService;
    @Autowired
    private UserDetailInfoService userDetailInfoService;

    @RequestMapping("/annoce")
    public String annoce(Model model) {
        User user = PermissionContext.getUser();
        UserDetailInfo detailInfo = userDetailInfoService.getByUserId(user.getId());
        String provinceCode = detailInfo.getProvinceCode();
        String cityCode = detailInfo.getCityCode();
        City city = areaInfoService.getByCityCode(cityCode);
        Province province = areaInfoService.getProvinceByprovinceCode(provinceCode);
        model.addAttribute("cname", province.getCname() + city.getCname());
        return "annoce";
    }

    @RequestMapping("/makeup")
    public String makeup() {
        return "makeup";
    }

    @RequestMapping("/becomeMember")
    public String becomeMember(Model model) {
        User user = PermissionContext.getUser();
        UserMember userMember = userMemberService.getLatestByUserId(user.getId());
        if (userMember != null) {
            String groupId = userMember.getGroupId();
            UserGroup userGroup = userGroupService.getById(groupId);
            model.addAttribute("nickName", user.getOutNick());
            String code = userMember.getCode();
            model.addAttribute("code", code);
            model.addAttribute("groupName", userGroup.getCname());
            model.addAttribute("groupImg", GlobalValue.QINIU_HOST + userGroup.getImg());
        }


        return "becomeMember";
    }

    @RequestMapping("/")
    public String index(Model model) {
        String authUrl = WeiXinHelper.getAuthUrl("/weixinApi/weixinLogin");
        model.addAttribute("authUrl", authUrl);


        return "weixinlogin";
    }

    @RequestMapping("/register")
    public String register(Model model) {
        List<Province> provinces = areaInfoService.getAllProvinces();
        model.addAttribute("provinces", provinces);
        return "weixinregister";
    }

    @RequestMapping("/memberGuide")
    public String memberGuide(Model model) {
        List<PropertyDict> timeWorks =
                propertyDictService.getListByDomainId(IdTypeHandler.encode(1));
        List<PropertyDict> teamCnts =
                propertyDictService.getListByDomainId(IdTypeHandler.encode(2));
        List<PropertyDict> saleAmounts =
                propertyDictService.getListByDomainId(IdTypeHandler.encode(3));
        model.addAttribute("timeWorks", timeWorks);
        model.addAttribute("teamCnts", teamCnts);
        model.addAttribute("saleAmounts", saleAmounts);
        return "memberGuide";
    }

    @RequestMapping("/fail")
    public String fail() {
        return "fail";
    }

    @RequestMapping("/undone")
    public String undone() {
        return "undone";
    }

    @RequestMapping("/userCenter")
    public String userCenter(Model model) {
        User user = PermissionContext.getUser();
        // 判断用户是否是会员。如果不是会员，跳转到引导页促使其完成会员申请
        // UserAudit userAudit = userAuditService.getByUserId(user.getId());
        // logger.error(user.getId() + "----------------" + IdTypeHandler.decode(user.getId()));
        // if (userAudit == null) {
        // return "redirect:/memberGuide";
        // } else if (userAudit.getAuditStatus() == AuditStatus.fail) {
        // return "redirect:/fail";
        // } else if (userAudit.getAuditStatus() == AuditStatus.undone) {
        // return "redirect:/undone";
        // }
        if (StringUtils.isBlank(user.getUsername())) {
            return "/makeup";
        }

        model.addAttribute("username", user.getUsername());
        model.addAttribute("headImg", user.getHeadImg());
        return "userCenter";
    }

    @RequestMapping("/form")
    public String form() {
        return "form";
    }

    @RequestMapping("/websocket")
    public String websocket() {
        return "websocket";
    }

    @RequestMapping("/upload")
    public String upload() {
        return "upload";
    }

    @RequestMapping(value = "/uploadFile", method = RequestMethod.POST)
    public String uploadFile(String cname,
            @RequestParam(value = "imgs", required = true) MultipartFile[] imgs) {
        logger.info(cname);
        for (MultipartFile file : imgs) {
            logger.info(file.getOriginalFilename());
        }
        return "form";
    }

    @RequestMapping("/ajax")
    public String ajax() {
        return "ajax";
    }

    @ResponseBody
    @RequestMapping("/ajaxSubmit")
    public int ajaxSubmit(String intro,
            @RequestParam(value = "imgs", required = true) MultipartFile[] imgs) {
        logger.info(intro);
        for (MultipartFile file : imgs) {
            logger.info(file.getOriginalFilename());
        }
        return 0;
    }


    @ResponseBody
    @RequestMapping("/getByProvinceCode")
    public List<City> getByProvinceCode(String provinceCode) {
        List<City> citys = areaInfoService.getByProvinceCode(provinceCode);
        return citys;
    }

    @ResponseBody
    @RequestMapping("/getAreasByCityCode")
    public List<Area> getByCityCode(String cityCode) {
        List<Area> areas = areaInfoService.getAreasByCityCode(cityCode);
        return areas;
    }


}
